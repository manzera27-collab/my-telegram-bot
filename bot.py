# -*- coding: utf-8 -*-
# KeyToFate ‚Äî –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è Vollanalyse + —É–ª—É—á—à–µ–Ω–Ω–∞—è Namensenergie)
# –¢—Ä–µ–±—É–µ—Ç—Å—è python-telegram-bot v20+

import os, re
from datetime import datetime
from typing import Tuple, List, Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, ConversationHandler, filters
)
from dotenv import load_dotenv

# ========================= –ù–ê–°–¢–†–û–ô–ö–ê =========================
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise SystemExit("API_TOKEN is missing. Set it in env.")

# ---- —É—Ç–∏–ª–∏—Ç—ã ----
def html_escape(s: str) -> str:
    return s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")

def back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Zur√ºck ins Men√º", callback_data="open_menu")]])

def parse_date(text: str) -> Tuple[int,int,int]:
    m = re.search(r'(\d{1,2})[.\s](\d{1,2})[.\s](\d{4})', text)
    if not m:
        raise ValueError("Bitte Datum im Format TT.MM.JJJJ, z. B. 25.11.1978.")
    d, mth, yr = int(m.group(1)), int(m.group(2)), int(m.group(3))
    datetime(year=yr, month=mth, day=d)  # validate
    return d, mth, yr

def parse_dates_multi(text: str) -> List[Tuple[int,int,int]]:
    found = re.findall(r'(\d{1,2})[.\s](\d{1,2})[.\s](\d{4})', text)
    result = []
    for d, mth, yr in found:
        day, month, year = int(d), int(mth), int(yr)
        datetime(year=year, month=month, day=day)
        result.append((day, month, year))
    return result

def reduzieren(n: int, keep_master=True) -> int:
    while n > 9:
        s = sum(int(d) for d in str(n))
        if keep_master and s in (11, 22, 33):
            return s
        n = s
    return n

def reduzieren_1_9(n: int) -> int:
    while n > 9:
        n = sum(int(d) for d in str(n))
    return n

# ------------------------- –§–æ—Ä–º—É–ª—ã -----------------------
def geisteszahl(day: int) -> int: return reduzieren(day)
def handlungszahl(day: int, month: int, year: int) -> int: return reduzieren(sum(int(d) for d in f"{day:02d}{month:02d}{year}"))
def verwirklichungszahl(g: int, h: int) -> int: return reduzieren(g + h)
def ergebniszahl(g: int, h: int, v: int) -> int: return reduzieren(g + h + v)
def geldcode(day: int, month: int, year: int) -> str:
    d1, d2 = reduzieren(day), reduzieren(month)
    d3 = reduzieren(sum(int(d) for d in str(year)))
    d4 = reduzieren(d1 + d2 + d3)
    return f"{d1}{d2}{d3}{d4}"
def tagesenergie(bday_day: int, today_day: int) -> int: return reduzieren_1_9(sum(int(d) for d in f"{bday_day:02d}{today_day:02d}"))

# ========================= –¢–ï–ö–°–¢–´ =========================
GEISTES_TXT = {
    1: "(Menschen, geboren am 1., 10., 19., 28.) ‚Äî F√ºhrung, starker Wille, Initiative.",
    2: "(2., 11., 20., 29.) ‚Äî Harmonie, Diplomatie, empathisches Verstehen.",
    3: "(3., 12., 21., 30.) ‚Äî Wissen, Ausdruck, Kreativit√§t.",
    4: "(4., 13., 22., 31.) ‚Äî Struktur, Ordnung, Ausdauer.",
    5: "(5., 14., 23.) ‚Äî Bewegung, Kommunikation, Chancen.",
    6: "(6., 15., 24.) ‚Äî Liebe, F√ºrsorge, Verantwortung.",
    7: "(7., 16., 25.) ‚Äî Weisheit, Wahrheit, Disziplin.",
    8: "(8., 17., 26.) ‚Äî Management, Erfolg, Gerechtigkeit.",
    9: "(9., 18., 27.) ‚Äî Dienst, Mitgef√ºhl, Vollendung.",
}

# –ö–æ—Ä–æ—Ç–∫–∏–π ¬´–æ–±—â–∏–π¬ª –±–ª–æ–∫ –¥–ª—è Geisteszahl (1‚Äì9) ‚Äî –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª –≤ –∫–Ω–∏–≥–µ (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Vollanalyse)
GEISTES_BLOCK = {
    7: """(Menschen, geboren am 7., 16. oder 25. eines Monats):

Sie sind ein genialer Mensch, aber nur, wenn Sie f√ºr sich selbst Disziplin f√ºr Geist und K√∂rper schaffen. Ohne Plan, Sport und Disziplin entsteht Chaos. Hauptaufgabe: bewusst Disziplin kultivieren (z. B. Sport, Yoga), damit das Leben keine Krisen f√ºr Sie schafft. Sie haben viel vitale/sexuelle Energie ‚Äî –µ—ë –Ω—É–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å. –ò–∑–±–µ–≥–∞—Ç—å –≤–µ—â–µ—Å—Ç–≤, –º–µ–Ω—è—é—â–∏—Ö —Å–æ–∑–Ω–∞–Ω–∏–µ ‚Äî —Ç—Ä–µ–∑–≤–æ—Å—Ç—å –¥–∞—ë—Ç –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.""",
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤–∏—à—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ 1‚Äì6,8‚Äì9 –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É
}

# –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è 1‚Äì31 (—Å–æ–∫—Ä. —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é —Ç–≤–æ–∏ –±–ª–æ–∫–∏)
DAY_BIRTH_TXT: Dict[int, str] = {
    25: """Wenn Sie am 25. geboren sind:
Ihre St√§rken sind die Gesch√§ftsentwicklung und Kommunikation durch das Verst√§ndnis von Menschen. Sie streben danach, andere zu verstehen, und verwirklichen sich hervorragend in der Kommunikation. T√§glicher Sport und klare Zielsetzung bringen √ºberragende Ergebnisse.
Achten Sie auf innere Ehrlichkeit; √ºbernehmen Sie Verpflichtungen und Verantwortung. Dann werden Sie ein F√ºhrer, der Menschen versteht. Hervorragende Verhandlungsf√§higkeiten ‚Äî richten Sie Aufmerksamkeit auf das Ergebnis.""",
    7: """Wenn Sie am 7. geboren sind:
Wahrscheinlich lieben Sie Sport seit Kindheit und besitzen eine gro√üe Energiereserve. Wichtig: Ziele setzen, —ç–Ω–µ—Ä–≥–∏—é –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞ —Ö–∞–æ—Å. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Å–ø–æ—Ä—Ç ‚Äî –ø—Ä–æ—Ç–∏–≤ —Å–æ–º–Ω–µ–Ω–∏–π.""",
    16: """Wenn Sie am 16. geboren sind:
–ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏. –ñ–∏–∑–Ω—å –¥–∞—Å—Ç –ª—é–±–æ–≤—å/–¥–µ–Ω—å–≥–∏/—É—Å–ø–µ—Ö, –µ—Å–ª–∏ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞—Å–∫–µ–∑—ã, –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–Ω–∏, —Å—Ç–∞–≤—å—Ç–µ –¥–æ–ª–≥–∏–µ —Ü–µ–ª–∏, –¥–æ–≤–æ–¥–∏—Ç–µ –¥–µ–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ."""
    # –ü–æ –∂–µ–ª–∞–Ω–∏—é –¥–æ–±–∞–≤—å —Å—é–¥–∞ 1..31 —Ü–µ–ª–∏–∫–æ–º –∏–∑ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏
}

# Zusatz: –ø–ª–∞–Ω–µ—Ç—ã / –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ Geisteszahl (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É)
ZUSATZ_INFO = {
    1: "üî≠ Planet: Sonne. üíº Passend: F√ºhrung, Entrepreneurship, Product-Owner, Sales.",
    2: "üî≠ Planet: Mond. üíº Passend: HR/Diplomatie, Psychologie, Coaching, Service/Support.",
    3: "üî≠ Planet: Jupiter. üíº Passend: Lehre, Schreiben, Marketing, Reisen/Studium.",
    4: "üî≠ Planet: Uranus/Saturn. üíº Passend: Operations, Engineering, Bau/Architektur.",
    5: "üî≠ Planet: Merkur. üíº Passend: Vertrieb, PR, Medien, SMM, Reisen/Logistik.",
    6: "üî≠ Planet: Venus. üíº Passend: Design, Beauty, Pflege/Medizin, People-Management.",
    7: "üî≠ Planet: Neptun/Mars. üíº Passend: Research, Analytics, Coaching, Kampf-—Å–ø–æ—Ä—Ç/—Ç—Ä–µ–Ω–µ—Ä.",
    8: "üî≠ Planet: Saturn/Pluto. üíº Passend: Management, Finanzen, Recht, Big-Corp/Executive.",
    9: "üî≠ Planet: Mars/Neptun. üíº Passend: –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, Art, Healing, –ù–ö–û/—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.",
}

# Tagesenergie 1‚Äì9
TAG_TXT = {
    1: "Neuer Zyklus, klare Entscheidungen, erste Schritte.",
    2: "Dialog, Ausgleich, Partnerschaft, ehrliche Gespr√§che.",
    3: "Kommunikation, Lernen, Reisen, inspirierender Austausch.",
    4: "Struktur, Planung, praktische Arbeit, Ordnung schaffen.",
    5: "Chancen, Bewegung, Netzwerke, flexible L√∂sungen.",
    6: "Harmonie, Familie, Sch√∂nheit, reife Verantwortung.",
    7: "Analyse, Spiritualit√§t, Hygiene des Geistes.",
    8: "Management, Finanzen, Ergebnisse, Leistung.",
    9: "Abschluss, Dienst, Gro√üz√ºgigkeit, Raum f√ºr Neues.",
}

# Namensenergie (Pythagorean) ‚Äî –∫–∞—Ä—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
NAME_MAP = {
    **{c:1 for c in "AIJQY"}, **{c:2 for c in "BKR"}, **{c:3 for c in "CLSG"},
    **{c:4 for c in "DMT"}, **{c:5 for c in "EHNX"}, **{c:6 for c in "UVW"},
    **{c:7 for c in "OZ"}, **{c:8 for c in "FP"},
}
def normalize_latin(s: str) -> str:
    return (s.replace("√Ñ","A").replace("√ñ","O").replace("√ú","U")
              .replace("√§","a").replace("√∂","o").replace("√º","u")
              .replace("√ü","SS"))

def namensenergie(text: str) -> int:
    vals = [NAME_MAP.get(ch) for ch in normalize_latin(text).upper() if ch in NAME_MAP]
    vals = [v for v in vals if v is not None]
    return reduzieren(sum(vals)) if vals else 0

NAME_NUMBER_DESC = {
    1: "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ò–º—è –¥–∞—ë—Ç —Ç—è–≥—É –Ω–∞—á–∏–Ω–∞—Ç—å –∏ –≤–µ—Å—Ç–∏.",
    2: "–î–∏–ø–ª–æ–º–∞—Ç–∏—è, –º—è–≥–∫–∞—è —Å–∏–ª–∞, —á—É—Ç–∫–æ—Å—Ç—å. –ò–º—è –ø—Ä–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å.",
    3: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –∫—Ä–µ–∞—Ç–∏–≤, –æ–±—É—á–µ–Ω–∏–µ. –ò–º—è —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ.",
    4: "–°–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å, –ø–æ—Ä—è–¥–æ–∫, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å. –ò–º—è –ø—Ä–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å.",
    5: "–°–≤–æ–±–æ–¥–∞, —Å–∫–æ—Ä–æ—Å—Ç—å, –ø—Ä–æ–¥–∞–∂–∏/PR. –ò–º—è –¥–∞—ë—Ç –≥–∏–±–∫–æ—Å—Ç—å –∏ —Ö–∞—Ä–∏–∑–º—É.",
    6: "–ö—Ä–∞—Å–æ—Ç–∞, –∑–∞–±–æ—Ç–∞, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –ò–º—è –ø—Ä–æ —Å–µ–º—å—é/–ª—é–¥–µ–π/—ç—Å—Ç–µ—Ç–∏–∫—É.",
    7: "–ì–ª—É–±–∏–Ω–∞, –∞–Ω–∞–ª–∏–∑, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å. –ò–º—è –ø—Ä–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É —É–º–∞.",
    8: "–°—Ç–∞—Ç—É—Å, —Ñ–∏–Ω–∞–Ω—Å—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò–º—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–ª–∞—Å—Ç—å.",
    9: "–°–ª—É–∂–µ–Ω–∏–µ, —Å–º—ã—Å–ª, —â–µ–¥—Ä–æ—Å—Ç—å. –ò–º—è –ø—Ä–æ –≥—É–º–∞–Ω–∏–∑–º –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.",
}

# ========================= UI/STATE =========================
ASK_DAY_BIRTH, ASK_COMPAT_1, ASK_COMPAT_2, ASK_NAME, ASK_GROUP, ASK_FULL, ASK_PATH = range(7)

WELCOME = ("üåü <b>Willkommen!</b>\n\n"
"Vor Ihnen liegt <b>KeyToFate</b> ‚Äì Lehre √ºber Zahlen und Wege.\n\n"
"‚ú® L√ºften Sie den Schleier Ihres Schicksals ‚Äì und lassen Sie KeyToFate Ihr Wegweiser sein. ‚ú®")
MENU_HEADER = "üîΩ <b>Hauptmen√º</b>\nBitte w√§hlen Sie:"

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßÆ Vollanalyse", callback_data="calc_full")],
        [InlineKeyboardButton("üîÜ Tagesenergie", callback_data="calc_day")],
        [InlineKeyboardButton("üî§ Namensenergie", callback_data="calc_name")],
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤–∫–ª—é—á–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ:
        # [InlineKeyboardButton("üíû Partnerschaft", callback_data="calc_compat")],
        # [InlineKeyboardButton("üë• Kollektivenergie", callback_data="calc_group")],
        # [InlineKeyboardButton("üß≠ Entwicklungspfad", callback_data="calc_path")],
    ])

# ========================= HANDLERS =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è Zum Men√º", callback_data="open_menu")]])
    await update.message.reply_html(WELCOME, reply_markup=kb)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    await q.message.reply_html(MENU_HEADER, reply_markup=main_menu())
    return ConversationHandler.END

async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; data = q.data; await q.answer()
    if data=="calc_full":
        await q.message.reply_html("üßÆ Geben Sie Geburtsdatum ein (TT.MM.JJJJ):")
        return ASK_FULL
    if data=="calc_day":
        await q.message.reply_html("Geben Sie Ihr Geburtsdatum ein (TT.MM.JJJJ):")
        return ASK_DAY_BIRTH
    if data=="calc_name":
        await q.message.reply_html("Geben Sie den Namen ein (lateinische Schreibweise):")
        return ASK_NAME
    # –Ω–∏–∂–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–∏—à—å –∏—Ö –≤ –º–µ–Ω—é
    return ConversationHandler.END

# ---- Vollanalyse (–¢–û–õ–¨–ö–û Geisteszahl + –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è + Zusatz + Geldcode) ----
async def ask_full(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        d,m,y = parse_date(update.message.text.strip())
        g = geisteszahl(d)
        geld = geldcode(d,m,y)

        parts = [f"<b>Vollanalyse f√ºr {d:02d}.{m:02d}.{y}</b>"]
        # –°–∂–∞—Ç—ã–π –æ–±—â–∏–π –±–ª–æ–∫ –ø–æ Geisteszahl
        geist_short = GEISTES_TXT.get(g,"")
        parts.append(f"üß† <b>Geisteszahl {g}</b>\n{html_escape(geist_short)}")
        if g in GEISTES_BLOCK:
            parts.append(html_escape(GEISTES_BLOCK[g]))

        # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        day_text = (DAY_BIRTH_TXT.get(d) or "").strip()
        if day_text:
            parts.append(f"üìÖ <b>Wenn Sie am {d} geboren sind</b>\n{html_escape(day_text)}")

        # Zusatz (–ø–ª–∞–Ω–µ—Ç—ã/–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏) ‚Äî –ü–û–°–õ–ï –æ–ø–∏—Å–∞–Ω–∏—è –¥–Ω—è
        zusatz = ZUSATZ_INFO.get(g)
        if zusatz:
            parts.append(f"‚ûï <b>Zus√§tzliche Info</b>\n{html_escape(zusatz)}")

        # –î–µ–Ω—å–≥–∏-–∫–æ–¥
        parts.append(f"üí∞ <b>Geldcode:</b> <code>{geld}</code>")

        await update.message.reply_html("\n\n".join(parts), reply_markup=back_kb())
        return ConversationHandler.END
    except Exception as ex:
        await update.message.reply_html(f"‚ùå Fehler: {html_escape(str(ex))}", reply_markup=back_kb())
        return ASK_FULL

# ---- Tagesenergie ----
async def ask_day_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        d,m,y = parse_date(update.message.text.strip()); today = datetime.now()
        val = tagesenergie(d, today.day)
        body = TAG_TXT.get(val, "Energie im Fluss.")
        await update.message.reply_html(
            f"üìÖ <b>Tagesenergie {today.day:02d}.{today.month:02d}.{today.year}</b>\n\n{html_escape(body)}",
            reply_markup=back_kb()
        )
        return ConversationHandler.END
    except Exception as ex:
        await update.message.reply_html(f"‚ùå {html_escape(str(ex))}", reply_markup=back_kb())
        return ASK_DAY_BIRTH

# ---- Namensenergie (—á–∏—Å–ª–æ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ) ----
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    val = namensenergie(name)
    desc = NAME_NUMBER_DESC.get(val, "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.")
    await update.message.reply_html(
        f"üî§ <b>Namensenergie</b> ‚Äû{html_escape(name)}‚Äú: <b>{val}</b>\n\n{html_escape(desc)}",
        reply_markup=back_kb()
    )
    return ConversationHandler.END

# ========================= BOOTSTRAP =========================
def main():
    app = Application.builder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^open_menu$"))
    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_menu_click, pattern="^calc_")],
        states={
          ASK_FULL:[MessageHandler(filters.TEXT & ~filters.COMMAND, ask_full)],
          ASK_DAY_BIRTH:[MessageHandler(filters.TEXT & ~filters.COMMAND, ask_day_birth)],
          ASK_NAME:[MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True
    )
    app.add_handler(conv)
    print("ü§ñ KeyToFate l√§uft. /start ‚Üí Men√º.")
    app.run_polling()

if __name__=="__main__":
    main()
